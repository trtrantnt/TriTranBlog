[{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://trtrantnt.github.io/notes/go/basic/_index.bn/","summary":"","tags":null,"title":"Go বেসিক"},{"categories":null,"contents":" Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://trtrantnt.github.io/notes/go/basic/introduction/","summary":"\u003c!-- A Sample Program --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eHello World\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003eA sample go program is show here.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003emessage\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egreetMe\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;world\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emessage\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egreetMe\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRun the program as below:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ go run hello.go\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Declaring Variables --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eVariables\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003e\u003cstrong\u003eNormal Declaration:\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emsg\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003emsg\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003e\u003cstrong\u003eShortcut:\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003emsg\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Declaring Constants --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eConstants\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePhi\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1.618\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e","tags":null,"title":"Introduction"},{"categories":null,"contents":" Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.Println(\u0026#34;Value is\u0026#34;, b) func getPointer () (myPointer *int) { a := 234 return \u0026amp;a a := new(int) *a = 234 Pointers point to a memory location of a variable. Go is fully garbage-collected.\nType Conversion i := 2 f := float64(i) u := uint(i) Slice slice := []int{2, 3, 4} slice := []byte(\u0026#34;Hello\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://trtrantnt.github.io/notes/go/basic/types/","summary":"\u003c!-- String Type --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eStrings\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eMultiline string\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`Multiline\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003estring`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Number Types --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eNumbers\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003eTypical types\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e          \u003cspan style=\"color:#75715e\"\u003e// int\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3.\u003c/span\u003e         \u003cspan style=\"color:#75715e\"\u003e// float64\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4i\u003c/span\u003e     \u003cspan style=\"color:#75715e\"\u003e// complex128\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e byte(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e)  \u003cspan style=\"color:#75715e\"\u003e// byte (alias for uint8)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOther Types\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eu\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003euint\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e        \u003cspan style=\"color:#75715e\"\u003e// uint (unsigned)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efloat32\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e22.7\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e// 32-bit float\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!----------- Arrays  ------\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eArrays\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// var numbers [5]int\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003enumbers\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e [\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Pointers --\u003e\n\u003cdiv class=\"note-card medium-note\"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003ePointers\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e () {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003egetPointer\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Value is\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetPointer\u003c/span\u003e () (\u003cspan style=\"color:#a6e22e\"\u003emyPointer\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e234\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e new(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e234\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ePointers point to a memory location of a variable. Go is fully garbage-collected.\u003c/p\u003e","tags":null,"title":"Basic Types"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://trtrantnt.github.io/notes/go/advanced/_index.bn/","summary":"","tags":null,"title":"অ্যাডভান্সড"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.Printf(\u0026#34;At position %d, the character %s is present\\n\u0026#34;, i, val) n := 0 x := 42 for n != x { n := guess() } ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://trtrantnt.github.io/notes/go/basic/flow-control/","summary":"\u003c!-- Condition --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eCondition\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eday\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sunday\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eday\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;saturday\u0026#34;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003erest\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eday\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;monday\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eisTired\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003egroan\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003ework\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edoThing\u003c/span\u003e(); \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Uh oh\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Switch --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eSwitch\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eswitch\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eday\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sunday\u0026#34;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default!\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efallthrough\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;saturday\u0026#34;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003erest\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ework\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Loop --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eLoop\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecount\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ecount\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ecount\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;My counter is at\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ecount\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eentry\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Jack\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;John\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Jones\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eval\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eentry\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;At position %d, the character %s is present\\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eval\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eguess\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e","tags":null,"title":"Flow Control"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://trtrantnt.github.io/notes/go/advanced/files/","summary":"\u003c!-- Condition --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eCondition\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eday\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sunday\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eday\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;saturday\u0026#34;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003erest\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eday\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;monday\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eisTired\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003egroan\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003ework\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edoThing\u003c/span\u003e(); \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Uh oh\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e","tags":null,"title":"File Manipulation"},{"categories":null,"contents":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://trtrantnt.github.io/notes/bash/basic/","summary":"\u003c!-- Variable --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eVariable\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNAME\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;John\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eecho $NAME\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eecho \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$NAME\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eecho \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eNAME\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Condition --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eCondition\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[[\u003c/span\u003e -z \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$string\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e]]\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  echo \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;String is empty\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eelif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[[\u003c/span\u003e -n \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$string\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e]]\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  echo \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;String is not empty\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e","tags":null,"title":"Bash Variables"},{"categories":["JavaScript"],"contents":"Sử Dụng Hàm Nâng Cao trong JavaScript JavaScript cung cấp nhiều tính năng mạnh mẽ cho phép bạn sử dụng các hàm một cách linh hoạt và hiệu quả hơn. Trong bài viết này, chúng ta sẽ tìm hiểu về các khái niệm nâng cao liên quan đến hàm.\n4.0. Một Chút Về Hàm Hàm là một phần quan trọng trong JavaScript, cho phép bạn tái sử dụng mã và tổ chức logic một cách hiệu quả. Việc hiểu sâu hơn về hàm sẽ giúp bạn viết mã sạch hơn và dễ bảo trì hơn.\n4.1. Hàm Nâng Cao và Decorators Hàm nâng cao bao gồm các khái niệm như hàm lồng nhau, hàm mũi tên, và closures. Decorators là một tính năng mạnh mẽ cho phép bạn sửa đổi hoặc bổ sung chức năng cho các hàm hoặc lớp.\nVí dụ về Closure: function makeCounter() { let count = 0; return function() { count++; return count; }; } const counter = makeCounter(); console.log(counter()); // 1 console.log(counter()); // 2 Decorators: Decorators thường được sử dụng trong các framework như Angular để thêm chức năng cho các lớp hoặc phương thức.\n4.2. Generators và Iterators Generators và iterators cho phép bạn tạo ra các trình lặp (iterable) và kiểm soát luồng dữ liệu một cách linh hoạt.\nVí dụ về Generator: function* generateSequence() { yield 1; yield 2; yield 3; } const generator = generateSequence(); console.log(generator.next().value); // 1 console.log(generator.next().value); // 2 console.log(generator.next().value); // 3 Iterator: const iterable = { items: [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;], [Symbol.iterator]() { let index = 0; return { next: () =\u0026gt; { if (index \u0026lt; this.items.length) { return { value: this.items[index++], done: false }; } else { return { done: true }; } } }; } }; for (const item of iterable) { console.log(item); // \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34; } 4.3. Section 3 – Lập Trình Bất Đồng Bộ Lập trình bất đồng bộ (asynchronous programming) trong JavaScript giúp bạn xử lý các tác vụ không đồng bộ như gọi API hoặc đọc file mà không làm gián đoạn luồng chính của ứng dụng.\nPromises: const fetchData = new Promise((resolve, reject) =\u0026gt; { setTimeout(() =\u0026gt; resolve(\u0026#34;Dữ liệu đã tải\u0026#34;), 1000); }); fetchData.then(data =\u0026gt; console.log(data)); Async/Await: async function getData() { const data = await fetchData; console.log(data); } getData(); ","date":"December 26, 2024","hero":"/images/default-hero.jpg","permalink":"https://trtrantnt.github.io/posts/advanced/","summary":"\u003ch1 id=\"sử-dụng-hàm-nâng-cao-trong-javascript\"\u003eSử Dụng Hàm Nâng Cao trong JavaScript\u003c/h1\u003e\n\u003cp\u003eJavaScript cung cấp nhiều tính năng mạnh mẽ cho phép bạn sử dụng các hàm một cách linh hoạt và hiệu quả hơn. Trong bài viết này, chúng ta sẽ tìm hiểu về các khái niệm nâng cao liên quan đến hàm.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"40-một-chút-về-hàm\"\u003e4.0. Một Chút Về Hàm\u003c/h2\u003e\n\u003cp\u003eHàm là một phần quan trọng trong JavaScript, cho phép bạn tái sử dụng mã và tổ chức logic một cách hiệu quả. Việc hiểu sâu hơn về hàm sẽ giúp bạn viết mã sạch hơn và dễ bảo trì hơn.\u003c/p\u003e","tags":["Advanced"],"title":"Sử Dụng Hàm Nâng Cao trong JavaScript"},{"categories":["JavaScript"],"contents":"Tìm Hiểu Về Biến, Kiểu Dữ Liệu, Ép Kiểu, và Ghi Chú Trong JavaScript JavaScript là một ngôn ngữ linh hoạt cho phép bạn làm việc với nhiều kiểu dữ liệu và cách quản lý biến. Bài viết này sẽ hướng dẫn bạn cách khai báo biến, hiểu các kiểu dữ liệu, thực hiện ép kiểu, và sử dụng ghi chú hiệu quả.\n2.0. Section 1 – Variables Biến (Variables) Biến trong JavaScript được sử dụng để lưu trữ giá trị. Bạn có thể khai báo biến bằng các từ khóa var, let, hoặc const.\nVí dụ: let age = 25; // Khai báo biến có thể thay đổi giá trị const name = \u0026#34;Alice\u0026#34;; // Khai báo biến không thể thay đổi giá trị var isStudent = true; // Khai báo biến theo cách cũ 2.1. Section 2 – Data types and type casting – Part 1 Kiểu Dữ Liệu (Data Types) JavaScript hỗ trợ nhiều kiểu dữ liệu cơ bản:\nString: Chuỗi ký tự. Number: Số. Boolean: Giá trị đúng/sai. Undefined: Biến chưa được gán giá trị. Null: Giá trị rỗng. Ví dụ: let text = \u0026#34;Hello, World!\u0026#34;; // String let number = 42; // Number let isActive = false; // Boolean let notAssigned; // Undefined let emptyValue = null; // Null Ép Kiểu (Type Casting) Ép kiểu cho phép chuyển đổi một kiểu dữ liệu sang kiểu khác.\nVí dụ: let num = \u0026#34;123\u0026#34;; let convertedNum = Number(num); // Ép kiểu String thành Number console.log(convertedNum); // 123 let boolValue = Boolean(0); // Ép kiểu Number thành Boolean console.log(boolValue); // false 2.2. Section 3 – Data types and type casting – Part 2 Chuyển Đổi Tự Động (Implicit Casting) JavaScript có thể tự động chuyển đổi kiểu dữ liệu trong một số trường hợp.\nVí dụ: let result = \u0026#34;5\u0026#34; + 2; // Chuyển đổi Number thành String console.log(result); // \u0026#34;52\u0026#34; let subtraction = \u0026#34;10\u0026#34; - 2; // Chuyển đổi String thành Number console.log(subtraction); // 8 So Sánh Chặt Chẽ và Lỏng Lẻo (Strict vs. Loose Equality) So sánh lỏng lẻo (==) cho phép chuyển đổi kiểu dữ liệu. So sánh chặt chẽ (===) không cho phép chuyển đổi kiểu dữ liệu. Ví dụ: console.log(5 == \u0026#34;5\u0026#34;); // true console.log(5 === \u0026#34;5\u0026#34;); // false 2.3. Section 4 – Comments Ghi Chú (Comments) Ghi chú trong JavaScript giúp bạn giải thích mã hoặc vô hiệu hóa mã mà không cần xóa.\nLoại Ghi Chú: Ghi chú một dòng: Sử dụng //. Ghi chú nhiều dòng: Sử dụng /* */. Ví dụ: // Đây là ghi chú một dòng /* Đây là ghi chú nhiều dòng Dùng để giải thích các khối mã phức tạp */ Tổng Kết Biến, kiểu dữ liệu, ép kiểu, và ghi chú là những khái niệm cơ bản nhưng rất quan trọng trong JavaScript. Hiểu rõ chúng sẽ giúp bạn viết mã rõ ràng và hiệu quả hơn.\n","date":"December 25, 2024","hero":"/images/default-hero.jpg","permalink":"https://trtrantnt.github.io/posts/variablesdatatypes/","summary":"\u003ch1 id=\"tìm-hiểu-về-biến-kiểu-dữ-liệu-ép-kiểu-và-ghi-chú-trong-javascript\"\u003eTìm Hiểu Về Biến, Kiểu Dữ Liệu, Ép Kiểu, và Ghi Chú Trong JavaScript\u003c/h1\u003e\n\u003cp\u003eJavaScript là một ngôn ngữ linh hoạt cho phép bạn làm việc với nhiều kiểu dữ liệu và cách quản lý biến. Bài viết này sẽ hướng dẫn bạn cách khai báo biến, hiểu các kiểu dữ liệu, thực hiện ép kiểu, và sử dụng ghi chú hiệu quả.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"20-section-1--variables\"\u003e2.0. Section 1 – Variables\u003c/h2\u003e\n\u003ch3 id=\"biến-variables\"\u003eBiến (Variables)\u003c/h3\u003e\n\u003cp\u003eBiến trong JavaScript được sử dụng để lưu trữ giá trị. Bạn có thể khai báo biến bằng các từ khóa \u003ccode\u003evar\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, hoặc \u003ccode\u003econst\u003c/code\u003e.\u003c/p\u003e","tags":["Beginner"],"title":"Biến, Kiểu Dữ Liệu, Ép Kiểu, và Ghi Chú trong JavaScript"},{"categories":["JavaScript"],"contents":"Tìm Hiểu Về Classes Trong JavaScript Classes trong JavaScript là một cách hiện đại để tạo và quản lý các đối tượng, giúp mã dễ đọc hơn và mạnh mẽ hơn. Trong bài viết này, chúng ta sẽ tìm hiểu các khái niệm cơ bản về Classes.\n2.1. Class Declaration Classes được khai báo bằng từ khóa class, cho phép chúng ta định nghĩa một blueprint cho các đối tượng.\n2.1.1. Class Declaration class Car { constructor(brand) { this.brand = brand; } drive() { console.log(`${this.brand} is driving.`); } } // Tạo một instance của Car const myCar = new Car(\u0026#39;Toyota\u0026#39;); myCar.drive(); // Output: Toyota is driving. 2.1.2 Class Expression Câu lệnh lớp (class expression) cho phép bạn định nghĩa một lớp bên trong một biểu thức, và lớp đó có thể được gán cho một biến.\nconst Person = class { constructor(name, age) { this.name = name; this.age = age; } greet() { console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`); } }; 2.1.3 The Instance of Operator Toán tử instanceof được sử dụng để kiểm tra xem một đối tượng có phải là một thể hiện (instance) của một lớp cụ thể hay không..\nconst john = new Person(\u0026#34;John\u0026#34;, 30); console.log(john instanceof Person); // true 2.2. Section 2 – Properties 2.2.1 Properties Các thuộc tính trong một lớp là những đặc điểm mô tả các thể hiện (instance) của lớp đó. Chúng thường được định nghĩa trong hàm khởi tạo (constructor).\nclass Car { constructor(make, model) { this.make = make; this.model = model; } } 2.2.2 Định nghĩa thuộc tính bên trong các phương thức của lớp Thuộc tính cũng có thể được định nghĩa và sửa đổi trong các phương thức của lớp.\nclass Rectangle { constructor(width, height) { this.width = width; this.height = height; } setDimensions(width, height) { this.width = width; this.height = height; } } 2.2.3 Khai báo trực tiếp trong thân lớp Bạn có thể khai báo các thuộc tính trực tiếp trong thân lớp bằng cách sử dụng trường lớp công khai (public class fields).\nclass User { name = \u0026#34;Alice\u0026#34;; age = 25; } 2.3. Section 3 – Getters and Setters 2.3.1 Getters and Setters Getters và setters là các phương thức cho phép bạn định nghĩa cách lấy và thiết lập giá trị của các thuộc tính đối tượng. Getters được sử dụng để truy cập giá trị của thuộc tính, trong khi setters được sử dụng để thay đổi giá trị của chúng.\nclass Circle { constructor(radius) { this._radius = radius; } get radius() { return this._radius; } set radius(value) { if (value \u0026gt; 0) { this._radius = value; } } } 2.4. Section 4 – Inheritance 2.4.1 Inheritance Kế thừa cho phép một lớp kế thừa các thuộc tính và phương thức từ lớp khác. Điều này được thực hiện bằng cách sử dụng từ khóa extends.\nclass Animal { speak() { console.log(\u0026#34;Animal makes a sound\u0026#34;); } } class Dog extends Animal { speak() { console.log(\u0026#34;Dog barks\u0026#34;); } } 2.4.2 Shadowing Shadowing xảy ra khi một phương thức hoặc thuộc tính của lớp con có cùng tên với một phương thức hoặc thuộc tính trong lớp cha, làm ẩn đi việc triển khai của lớp cha.\nclass Animal { speak() { console.log(\u0026#34;Animal makes a sound\u0026#34;); } } class Dog extends Animal { speak() { super.speak(); // Call parent class method console.log(\u0026#34;Dog barks\u0026#34;); } } 2.4.3 Inheritance from a Constructor Function Các lớp cũng có thể kế thừa từ các hàm khởi tạo (constructor functions), cho phép kết hợp giữa lập trình hướng đối tượng và lập trình hàm.\nfunction Animal(name) { this.name = name; } Animal.prototype.speak = function() { console.log(`${this.name} makes a sound`); }; function Dog(name) { Animal.call(this, name); } Dog.prototype = Object.create(Animal.prototype); Dog.prototype.constructor = Dog; 2.5. Section 5 – Static Members 2.5.1 Static Members Các thành viên tĩnh (Static members) là các thuộc tính hoặc phương thức thuộc về chính lớp, không phải các thể hiện (instances) của lớp. Chúng được định nghĩa bằng cách sử dụng từ khóa static.\nclass MathHelper { static add(a, b) { return a + b; } } console.log(MathHelper.add(2, 3)); // 5 2.6. Section 6 – Classes vs. Constructors 2.6.1 Classes vs. Constructors Các lớp cung cấp một cú pháp hiện đại và sạch sẽ hơn để định nghĩa các hàm khởi tạo và phương thức. Chúng thực chất là \u0026ldquo;đường kính ngữ\u0026rdquo; (syntactic sugar) trên các hàm khởi tạo (constructor functions) và cung cấp các tính năng như kế thừa, getters, setters và phương thức tĩnh. Các hàm khởi tạo là cách cũ hơn để định nghĩa đối tượng và phương thức.\n// Constructor function function Person(name, age) { this.name = name; this.age = age; } Person.prototype.greet = function() { console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`); }; // Class syntax class Person { constructor(name, age) { this.name = name; this.age = age; } greet() { console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`); } } ","date":"December 25, 2024","hero":"/images/default-hero.jpg","permalink":"https://trtrantnt.github.io/posts/class/","summary":"\u003ch1 id=\"tìm-hiểu-về-classes-trong-javascript\"\u003eTìm Hiểu Về Classes Trong JavaScript\u003c/h1\u003e\n\u003cp\u003eClasses trong JavaScript là một cách hiện đại để tạo và quản lý các đối tượng, giúp mã dễ đọc hơn và mạnh mẽ hơn. Trong bài viết này, chúng ta sẽ tìm hiểu các khái niệm cơ bản về Classes.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"21-class-declaration\"\u003e2.1. Class Declaration\u003c/h2\u003e\n\u003cp\u003eClasses được khai báo bằng từ khóa \u003ccode\u003eclass\u003c/code\u003e, cho phép chúng ta định nghĩa một blueprint cho các đối tượng.\u003c/p\u003e","tags":["Intermediate"],"title":"Classes trong JavaScript"},{"categories":["JavaScript"],"contents":"Tìm Hiểu Về Đối Tượng Tích Hợp Trong JavaScript JavaScript cung cấp nhiều đối tượng tích hợp sẵn giúp xử lý các tác vụ phổ biến như thao tác dữ liệu, tính toán toán học, và làm việc với JSON. Bài viết này sẽ khám phá các loại đối tượng tích hợp và cách sử dụng chúng.\n3.0. Section 0 – Built-in Objects Đối tượng tích hợp sẵn (built-in objects) trong JavaScript là các công cụ mạnh mẽ được cung cấp để thực hiện các tác vụ lập trình thông thường.\n3.1. Kiểu Dữ Liệu Đơn Giản (Simple Data Types) Các kiểu dữ liệu đơn giản bao gồm các đối tượng như String, Number, và Boolean. Những đối tượng này cho phép bạn làm việc với các giá trị cơ bản một cách dễ dàng.\nVí dụ về String: const message = \u0026#34;Hello, World!\u0026#34;; console.log(message.toUpperCase()); // \u0026#34;HELLO, WORLD!\u0026#34; Ví dụ về Number: const number = 42; console.log(number.toString()); // \u0026#34;42\u0026#34; 3.2. Kiểu Dữ Liệu Phức Hợp (Composite Data Types) Kiểu dữ liệu phức hợp bao gồm các đối tượng như Array và Object, giúp bạn lưu trữ và quản lý dữ liệu phức tạp.\nVí dụ về Array: const fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Banana\u0026#34;, \u0026#34;Cherry\u0026#34;]; fruits.push(\u0026#34;Date\u0026#34;); console.log(fruits); // [\u0026#34;Apple\u0026#34;, \u0026#34;Banana\u0026#34;, \u0026#34;Cherry\u0026#34;, \u0026#34;Date\u0026#34;] Ví dụ về Object: const person = { name: \u0026#34;Alice\u0026#34;, age: 30, }; console.log(person.name); // \u0026#34;Alice\u0026#34; 3.3. JSON, Math và RegExp JSON Đối tượng JSON (JavaScript Object Notation) được sử dụng để làm việc với dữ liệu dạng JSON.\nconst jsonString = \u0026#39;{\u0026#34;name\u0026#34;:\u0026#34;Alice\u0026#34;,\u0026#34;age\u0026#34;:30}\u0026#39;; const data = JSON.parse(jsonString); console.log(data.name); // \u0026#34;Alice\u0026#34; Math Đối tượng Math cung cấp các phương thức và hằng số toán học.\nconsole.log(Math.sqrt(16)); // 4 console.log(Math.PI); // 3.141592653589793 RegExp Đối tượng RegExp cho phép làm việc với các biểu thức chính quy.\nconst pattern = /hello/i; console.log(pattern.test(\u0026#34;Hello, World!\u0026#34;)); // true 3.4. Mở Rộng Các Kiểu Tích Hợp (Extending Built-in Types) Bạn có thể mở rộng các đối tượng tích hợp để thêm chức năng mới, nhưng hãy cẩn thận để không ghi đè các phương thức mặc định.\nVí dụ mở rộng Array: Array.prototype.last = function() { return this[this.length - 1]; }; const numbers = [1, 2, 3]; console.log(numbers.last()); // 3 ","date":"December 25, 2024","hero":"/images/default-hero.jpg","permalink":"https://trtrantnt.github.io/posts/buildin/","summary":"\u003ch1 id=\"tìm-hiểu-về-đối-tượng-tích-hợp-trong-javascript\"\u003eTìm Hiểu Về Đối Tượng Tích Hợp Trong JavaScript\u003c/h1\u003e\n\u003cp\u003eJavaScript cung cấp nhiều đối tượng tích hợp sẵn giúp xử lý các tác vụ phổ biến như thao tác dữ liệu, tính toán toán học, và làm việc với JSON. Bài viết này sẽ khám phá các loại đối tượng tích hợp và cách sử dụng chúng.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"30-section-0--built-in-objects\"\u003e3.0. Section 0 – Built-in Objects\u003c/h2\u003e\n\u003cp\u003eĐối tượng tích hợp sẵn (built-in objects) trong JavaScript là các công cụ mạnh mẽ được cung cấp để thực hiện các tác vụ lập trình thông thường.\u003c/p\u003e","tags":["Intermediate"],"title":"Đối tượng tích hợp trong JavaScript"},{"categories":["JavaScript"],"contents":"Functions in JavaScript Hàm là một phần quan trọng trong JavaScript, giúp tái sử dụng mã và thực hiện các tác vụ lặp lại. Dưới đây là hướng dẫn chi tiết về các khái niệm và cách sử dụng hàm trong JavaScript.\n5.0. Functions – Part 1 5.0.1 Functions Hàm là một khối mã có thể được gọi để thực thi một tác vụ cụ thể. Các hàm giúp tách biệt mã thành các phần nhỏ hơn, dễ quản lý hơn.\n5.0.2 Declaring functions Có thể khai báo hàm theo nhiều cách khác nhau trong JavaScript. Dưới đây là ví dụ về khai báo hàm thông qua cách thông thường.\nfunction greet(name) { console.log(\u0026#34;Hello, \u0026#34; + name); } 5.0.3 Calling functions Sau khi khai báo hàm, bạn có thể gọi hàm đó để thực thi.\ngreet(\u0026#34;Alice\u0026#34;); // Kết quả: Hello, Alice 5.0.4 Functions – local variables Biến trong hàm thường chỉ có phạm vi trong hàm đó. Các biến này được gọi là biến cục bộ.\nfunction example() { let localVar = \u0026#34;I am local\u0026#34;; console.log(localVar); } 5.0.5 The return statement Câu lệnh return được sử dụng để trả về một giá trị từ hàm.\nfunction add(a, b) { return a + b; } console.log(add(2, 3)); // Kết quả: 5 5.0.6 Parameters Các tham số được truyền vào hàm để hàm có thể sử dụng trong quá trình thực thi.\nfunction greet(name, age) { console.log(name + \u0026#34; is \u0026#34; + age + \u0026#34; years old.\u0026#34;); } greet(\u0026#34;Bob\u0026#34;, 25); 5.0.7 Shadowing Shadowing xảy ra khi một biến trong phạm vi con (local) có tên trùng với biến trong phạm vi ngoài (global).\nlet x = 10; function test() { let x = 5; console.log(x); // Kết quả: 5 (biến x trong hàm shadowing biến x ngoài hàm) } test(); 5.1. Functions – Part 2 5.1.1 Parameters validation Kiểm tra và xác nhận các tham số đầu vào trước khi sử dụng trong hàm.\nfunction divide(a, b) { if (b === 0) { console.log(\u0026#34;Không thể chia cho 0\u0026#34;); } else { return a / b; } } console.log(divide(10, 0)); // Kết quả: Không thể chia cho 0 5.1.2 Recursion Đệ quy là khi một hàm gọi lại chính nó. Đây là một kỹ thuật mạnh mẽ trong lập trình.\nfunction factorial(n) { if (n === 0) return 1; return n * factorial(n - 1); } console.log(factorial(5)); // Kết quả: 120 5.1.3 Functions as first-class members Hàm trong JavaScript là các đối tượng bậc nhất, có thể được gán cho biến, truyền làm đối số và trả về từ hàm.\nconst greet = function(name) { console.log(\u0026#34;Hello, \u0026#34; + name); }; greet(\u0026#34;Charlie\u0026#34;); 5.1.4 Function expressions Biểu thức hàm là khi một hàm được khai báo như một biểu thức và có thể gán cho một biến.\nconst square = function(x) { return x * x; }; console.log(square(4)); // Kết quả: 16 5.1.5 Callbacks Callback là một hàm được truyền vào một hàm khác như một đối số và được gọi lại khi hoàn thành một tác vụ.\nfunction fetchData(callback) { setTimeout(() =\u0026gt; { callback(\u0026#34;Dữ liệu đã được tải\u0026#34;); }, 1000); } fetchData(function(data) { console.log(data); }); 5.1.6 Asynchronous callbacks Callback bất đồng bộ giúp xử lý các tác vụ không đồng bộ như gọi API.\nfunction fetchData(callback) { setTimeout(() =\u0026gt; { callback(\u0026#34;Dữ liệu đã được tải\u0026#34;); }, 2000); } fetchData(function(data) { console.log(data); }); 5.1.7 setTimeout and setInterval functions setTimeout và setInterval là hai hàm giúp trì hoãn hoặc lặp lại hành động sau một khoảng thời gian nhất định.\nsetTimeout(() =\u0026gt; { console.log(\u0026#34;Đã trễ 2 giây\u0026#34;); }, 2000); setInterval(() =\u0026gt; { console.log(\u0026#34;Lặp lại mỗi giây\u0026#34;); }, 1000); 5.1.8 Arrow functions Arrow functions cung cấp cú pháp ngắn gọn để khai báo hàm.\nconst add = (a, b) =\u0026gt; a + b; console.log(add(2, 3)); // Kết quả: 5 ","date":"December 25, 2024","hero":"/images/default-hero.jpg","permalink":"https://trtrantnt.github.io/posts/functionsjs/","summary":"\u003ch1 id=\"functions-in-javascript\"\u003eFunctions in JavaScript\u003c/h1\u003e\n\u003cp\u003eHàm là một phần quan trọng trong JavaScript, giúp tái sử dụng mã và thực hiện các tác vụ lặp lại. Dưới đây là hướng dẫn chi tiết về các khái niệm và cách sử dụng hàm trong JavaScript.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"50-functions--part-1\"\u003e5.0. Functions – Part 1\u003c/h2\u003e\n\u003ch3 id=\"501-functions\"\u003e5.0.1 Functions\u003c/h3\u003e\n\u003cp\u003eHàm là một khối mã có thể được gọi để thực thi một tác vụ cụ thể. Các hàm giúp tách biệt mã thành các phần nhỏ hơn, dễ quản lý hơn.\u003c/p\u003e","tags":["Beginner","JavaScript"],"title":"Functions in JavaScript"},{"categories":["JavaScript"],"contents":"JavaScript Essentials 1: Giới thiệu về JavaScript và Lập trình Máy tính Chào mừng bạn đến với khóa học JavaScript Essentials 1! Trong bài viết này, chúng ta sẽ khám phá các khái niệm cơ bản về JavaScript, cách thiết lập môi trường lập trình, và viết chương trình \u0026ldquo;Hello, World!\u0026rdquo; đầu tiên của bạn.\n1.0. Welcome to JavaScript Essentials 1 JavaScript Essentials 1 là bước đầu tiên trong hành trình học lập trình JavaScript. Khóa học này sẽ cung cấp cho bạn nền tảng vững chắc về ngôn ngữ lập trình phổ biến nhất thế giới, được sử dụng để phát triển web, ứng dụng di động và nhiều lĩnh vực khác.\n1.1. Section 1 – About JavaScript JavaScript là gì? JavaScript là một ngôn ngữ lập trình linh hoạt và mạnh mẽ, được sử dụng rộng rãi để phát triển giao diện người dùng và các ứng dụng web. Đây là một trong ba công nghệ cốt lõi của web:\nHTML: Định nghĩa cấu trúc nội dung. CSS: Định nghĩa cách trình bày nội dung. JavaScript: Định nghĩa hành vi và tính năng tương tác của trang web. Tại sao nên học JavaScript? JavaScript là nền tảng cho phát triển web. Có thể sử dụng trên cả phía client và server (với Node.js). Cộng đồng lớn và nhiều tài nguyên hỗ trợ. 1.2. Section 2 – Setting up programming environment Để bắt đầu lập trình với JavaScript, bạn cần thiết lập môi trường làm việc phù hợp. Dưới đây là các bước cơ bản:\n1. Cài đặt trình duyệt web Hầu hết các trình duyệt hiện đại như Chrome, Firefox, hoặc Edge đều hỗ trợ JavaScript và đi kèm với công cụ Developer Tools để kiểm tra và chạy mã.\n2. Cài đặt trình soạn thảo mã nguồn Sử dụng trình soạn thảo mã nguồn như Visual Studio Code để viết và quản lý mã JavaScript của bạn.\n3. Chạy JavaScript Bạn có thể chạy mã JavaScript trực tiếp trong trình duyệt hoặc sử dụng Node.js để chạy trên môi trường server.\n1.3. Section 3 – Hello, World! Viết chương trình đầu tiên \u0026ldquo;Hello, World!\u0026rdquo; là chương trình cơ bản đầu tiên trong bất kỳ ngôn ngữ lập trình nào. Hãy cùng viết chương trình này bằng JavaScript.\nBước 1: Sử dụng Developer Tools trong trình duyệt Mở trình duyệt. Nhấn F12 để mở Developer Tools. Chuyển đến tab \u0026ldquo;Console\u0026rdquo; và nhập mã sau: console.log(\u0026#34;Hello, World!\u0026#34;); Bước 2: Sử dụng tệp HTML Tạo một tệp HTML đơn giản để chạy JavaScript:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Hello, World!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; console.log(\u0026#34;Hello, World!\u0026#34;); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Lưu tệp này dưới dạng index.html và mở nó trong trình duyệt. Mở Developer Tools để xem kết quả trong tab \u0026ldquo;Console\u0026rdquo;.\nHãy tiếp tục khám phá các khái niệm cơ bản của JavaScript để xây dựng nền tảng vững chắc cho các bài học tiếp theo!\n","date":"December 25, 2024","hero":"/images/default-hero.jpg","permalink":"https://trtrantnt.github.io/posts/introjs/","summary":"\u003ch1 id=\"javascript-essentials-1-giới-thiệu-về-javascript-và-lập-trình-máy-tính\"\u003eJavaScript Essentials 1: Giới thiệu về JavaScript và Lập trình Máy tính\u003c/h1\u003e\n\u003cp\u003eChào mừng bạn đến với khóa học JavaScript Essentials 1! Trong bài viết này, chúng ta sẽ khám phá các khái niệm cơ bản về JavaScript, cách thiết lập môi trường lập trình, và viết chương trình \u0026ldquo;Hello, World!\u0026rdquo; đầu tiên của bạn.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"10-welcome-to-javascript-essentials-1\"\u003e1.0. Welcome to JavaScript Essentials 1\u003c/h2\u003e\n\u003cp\u003eJavaScript Essentials 1 là bước đầu tiên trong hành trình học lập trình JavaScript. Khóa học này sẽ cung cấp cho bạn nền tảng vững chắc về ngôn ngữ lập trình phổ biến nhất thế giới, được sử dụng để phát triển web, ứng dụng di động và nhiều lĩnh vực khác.\u003c/p\u003e","tags":["Beginner"],"title":"Giới thiệu về JavaScript và Lập trình Máy tính"},{"categories":["JavaScript"],"contents":"Luồng Điều Khiển trong JavaScript JavaScript cung cấp các công cụ mạnh mẽ để điều khiển luồng thực thi của chương trình, bao gồm các câu lệnh điều kiện và vòng lặp. Những công cụ này giúp lập trình viên tạo ra các ứng dụng động và linh hoạt.\n4.0. Conditional Execution Câu lệnh điều kiện cho phép bạn kiểm tra các điều kiện và thực thi mã dựa trên kết quả của điều kiện đó.\nVí dụ If-Else: const age = 18; if (age \u0026gt;= 18) { console.log(\u0026#34;Bạn đủ tuổi để bỏ phiếu.\u0026#34;); } else { console.log(\u0026#34;Bạn chưa đủ tuổi để bỏ phiếu.\u0026#34;); } Ví dụ Switch: const day = \u0026#34;Monday\u0026#34;; switch (day) { case \u0026#34;Monday\u0026#34;: console.log(\u0026#34;Hôm nay là thứ Hai.\u0026#34;); break; case \u0026#34;Tuesday\u0026#34;: console.log(\u0026#34;Hôm nay là thứ Ba.\u0026#34;); break; default: console.log(\u0026#34;Không phải ngày trong tuần được hỗ trợ.\u0026#34;); } 4.1. Loops Vòng lặp cho phép bạn thực thi một đoạn mã nhiều lần dựa trên một điều kiện nhất định.\nVí dụ For Loop: for (let i = 0; i \u0026lt; 5; i++) { console.log(`Lần lặp thứ ${i}`); } Ví dụ While Loop: let count = 0; while (count \u0026lt; 5) { console.log(`Đếm: ${count}`); count++; } Ví dụ Do-While Loop: let number = 0; do { console.log(`Số hiện tại: ${number}`); number++; } while (number \u0026lt; 3); ","date":"December 25, 2024","hero":"/images/default-hero.jpg","permalink":"https://trtrantnt.github.io/posts/controlflowjs/","summary":"\u003ch1 id=\"luồng-điều-khiển-trong-javascript\"\u003eLuồng Điều Khiển trong JavaScript\u003c/h1\u003e\n\u003cp\u003eJavaScript cung cấp các công cụ mạnh mẽ để điều khiển luồng thực thi của chương trình, bao gồm các câu lệnh điều kiện và vòng lặp. Những công cụ này giúp lập trình viên tạo ra các ứng dụng động và linh hoạt.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"40-conditional-execution\"\u003e4.0. Conditional Execution\u003c/h2\u003e\n\u003cp\u003eCâu lệnh điều kiện cho phép bạn kiểm tra các điều kiện và thực thi mã dựa trên kết quả của điều kiện đó.\u003c/p\u003e","tags":["Beginner"],"title":"Luồng điều khiển trong JavaScript"},{"categories":["JavaScript"],"contents":"Toán tử và Tương tác Người dùng trong JavaScript Trong JavaScript, các toán tử là các công cụ quan trọng giúp thực hiện các phép tính và thao tác trên dữ liệu. Bên cạnh đó, JavaScript cung cấp cách thức để tương tác trực tiếp với người dùng thông qua giao diện console hoặc các hộp thoại. Hãy cùng khám phá các khái niệm này.\n3.0. Section 1 – Assignment, Arithmetic, and Logical Operators Toán tử Gán (Assignment Operators) Toán tử gán được sử dụng để gán giá trị cho một biến.\nlet x = 10; // Gán giá trị 10 cho biến x x += 5; // Tương đương với x = x + 5 Toán tử Số học (Arithmetic Operators) Các toán tử số học giúp thực hiện các phép toán cơ bản.\nlet a = 10; let b = 3; console.log(a + b); // 13 console.log(a - b); // 7 console.log(a * b); // 30 console.log(a / b); // 3.333... console.log(a % b); // 1 (phần dư) Toán tử Logic (Logical Operators) Toán tử logic được sử dụng để thực hiện các phép toán boolean.\nlet isTrue = true; let isFalse = false; console.log(isTrue \u0026amp;\u0026amp; isFalse); // false console.log(isTrue || isFalse); // true console.log(!isTrue); // false 3.1. Section 2 – String, Comparison, and Other JS Operators Toán tử Chuỗi (String Operators) Toán tử + có thể được sử dụng để nối chuỗi.\nlet firstName = \u0026#34;Alice\u0026#34;; let lastName = \u0026#34;Smith\u0026#34;; console.log(firstName + \u0026#34; \u0026#34; + lastName); // \u0026#34;Alice Smith\u0026#34; Toán tử So Sánh (Comparison Operators) Các toán tử so sánh được sử dụng để so sánh hai giá trị.\nlet x = 10; let y = 20; console.log(x \u0026gt; y); // false console.log(x \u0026lt; y); // true console.log(x == 10); // true console.log(x === \u0026#34;10\u0026#34;); // false (so sánh kiểu dữ liệu) Các Toán tử Khác (Other Operators) Toán tử Điều kiện (Ternary Operator) Toán tử điều kiện cho phép thực hiện các kiểm tra nhanh.\nlet age = 18; let isAdult = (age \u0026gt;= 18) ? \u0026#34;Yes\u0026#34; : \u0026#34;No\u0026#34;; console.log(isAdult); // \u0026#34;Yes\u0026#34; Toán tử typeof Toán tử typeof trả về kiểu dữ liệu của một biến.\nconsole.log(typeof 42); // \u0026#34;number\u0026#34; console.log(typeof \u0026#34;Hello\u0026#34;); // \u0026#34;string\u0026#34; console.log(typeof true); // \u0026#34;boolean\u0026#34; 3.2. Section 3 – Interacting with the User alert() – Hiển thị thông báo Hàm alert() hiển thị một hộp thoại thông báo.\nalert(\u0026#34;Welcome to JavaScript!\u0026#34;); prompt() – Lấy dữ liệu từ người dùng Hàm prompt() yêu cầu người dùng nhập dữ liệu.\nlet name = prompt(\u0026#34;What is your name?\u0026#34;); alert(\u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34;); confirm() – Yêu cầu xác nhận từ người dùng Hàm confirm() hiển thị một hộp thoại xác nhận với hai tùy chọn: OK và Cancel.\nlet isConfirmed = confirm(\u0026#34;Do you agree?\u0026#34;); if (isConfirmed) { console.log(\u0026#34;User agreed.\u0026#34;); } else { console.log(\u0026#34;User did not agree.\u0026#34;); } ","date":"December 25, 2024","hero":"/images/default-hero.jpg","permalink":"https://trtrantnt.github.io/posts/operatorsuserinteraction/","summary":"\u003ch1 id=\"toán-tử-và-tương-tác-người-dùng-trong-javascript\"\u003eToán tử và Tương tác Người dùng trong JavaScript\u003c/h1\u003e\n\u003cp\u003eTrong JavaScript, các toán tử là các công cụ quan trọng giúp thực hiện các phép tính và thao tác trên dữ liệu. Bên cạnh đó, JavaScript cung cấp cách thức để tương tác trực tiếp với người dùng thông qua giao diện console hoặc các hộp thoại. Hãy cùng khám phá các khái niệm này.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"30-section-1--assignment-arithmetic-and-logical-operators\"\u003e3.0. Section 1 – Assignment, Arithmetic, and Logical Operators\u003c/h2\u003e\n\u003ch3 id=\"toán-tử-gán-assignment-operators\"\u003eToán tử Gán (Assignment Operators)\u003c/h3\u003e\n\u003cp\u003eToán tử gán được sử dụng để gán giá trị cho một biến.\u003c/p\u003e","tags":["Beginner"],"title":"Toán tử và Tương tác Người dùng trong JavaScript"},{"categories":["Basic"],"contents":"Xin chào! Đây là một bài viết giới thiệu về các bài post trong Blog của tôi. Trong các bài post bên dưới chia sẻ về các nội dung mà tôi học được từ các khoá học: Networking Basics JavaScript Essentials 1 JavaScript Essentials 2 ","date":"December 25, 2024","hero":"/posts/introduction/hero.svg","permalink":"https://trtrantnt.github.io/posts/introduction/","summary":"\u003ch4 id=\"xin-chào-đây-là-một-bài-viết-giới-thiệu-về-các-bài-post-trong-blog-của-tôi-trong-các-bài-post-bên-dưới-chia-sẻ-về-các-nội-dung-mà-tôi-học-được-từ-các-khoá-học\"\u003eXin chào! Đây là một bài viết giới thiệu về các bài post trong Blog của tôi. Trong các bài post bên dưới chia sẻ về các nội dung mà tôi học được từ các khoá học:\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ch6 id=\"kbdnetworking-basicskbd\"\u003e\u003ckbd\u003eNetworking Basics\u003c/kbd\u003e\u003c/h6\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch6 id=\"markjavascript-essentials-1mark\"\u003e\u003cmark\u003eJavaScript Essentials 1\u003c/mark\u003e\u003c/h6\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch6 id=\"markjavascript-essentials-2mark\"\u003e\u003cmark\u003eJavaScript Essentials 2\u003c/mark\u003e\u003c/h6\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","tags":["Basic"],"title":"Giới thiệu"},{"categories":["Basic"],"contents":"Tìm Hiểu Về Đối Tượng Trong JavaScript\nĐối tượng là một trong những khái niệm quan trọng nhất trong JavaScript, giúp bạn tổ chức dữ liệu và logic một cách hiệu quả. Trong bài viết này, chúng ta sẽ khám phá các khía cạnh chính của đối tượng, từ cách tạo đến cách sử dụng.\n1.1. Đối tượng là gì? Đối tượng (Object) là một cấu trúc dữ liệu phức tạp, giúp lưu trữ nhiều giá trị liên quan. Nó có thể bao gồm các thuộc tính (properties) và phương thức (methods).\n1.1.1. Kiểu dữ liệu nguyên thủy (Primitive Data Types): Các giá trị như number, string, boolean là kiểu nguyên thủy.\nlet num = 10; // Kiểu số let str = \u0026#34;Hello\u0026#34;; // Kiểu chuỗi let bool = true; // Kiểu boolean 1.1.2. Mảng là kiểu phức tạp (Array as a Complex Type): Mảng cũng là một đối tượng đặc biệt trong JavaScript.\nlet arr = [1, 2, 3]; console.log(typeof arr); // \u0026#34;object\u0026#34; 1.1.3. Đối tượng như một kiểu khác của mảng (Object as a Different Type of Array): Đối tượng có cấu trúc key: value, khác biệt với mảng dựa trên chỉ số.\nlet obj = { name: \u0026#34;Alice\u0026#34;, age: 25 }; 1.2. Cách tạo và xóa đối tượng 1.2.1. Cách tạo cơ bản (Basic Way to Create Objects): let person = { name: \u0026#34;John\u0026#34;, age: 30, }; 1.2.2. Xóa đối tượng (Deleting Objects): Sử dụng từ khóa delete để xóa thuộc tính.\ndelete person.age; console.log(person); // { name: \u0026#34;John\u0026#34; } 1.3. Thuộc tính của đối tượng 1.3.1. Loại thuộc tính (Types): Giá trị thuộc tính có thể là bất kỳ kiểu dữ liệu nào.\nlet car = { brand: \u0026#34;Toyota\u0026#34;, model: 2020, isAvailable: true, }; 1.3.2. Thuộc tính lồng nhau (Nested Properties): let company = { name: \u0026#34;TechCorp\u0026#34;, address: { city: \u0026#34;New York\u0026#34;, zip: \u0026#34;10001\u0026#34; }, }; 1.3.3. Hàm như một thuộc tính (Function as a Property – Method): let calculator = { add: function (a, b) { return a + b; }, }; console.log(calculator.add(2, 3)); // 5 1.3.4. Thêm thuộc tính mới (Adding a New Property): person.gender = \u0026#34;male\u0026#34;; 1.3.5. Sửa đổi thuộc tính (Modifying a Property): person.name = \u0026#34;Doe\u0026#34;; 1.3.6. Xóa thuộc tính (Deleting a Property): delete person.gender; 1.4. Dot Notation vs. Bracket Notation 1.4.1. Khóa nhiều từ (Multi-word Keys): Sử dụng bracket notation khi khóa có khoảng trắng.\nlet obj = { \u0026#34;first name\u0026#34;: \u0026#34;Alice\u0026#34; }; console.log(obj[\u0026#34;first name\u0026#34;]); // Alice 1.4.2. Khóa tính toán (Computed Keys): let key = \u0026#34;age\u0026#34;; let user = { [key]: 25 }; console.log(user.age); // 25 1.5. Kiểm tra và liệt kê thuộc tính 1.5.1. Kiểm tra tồn tại (Existence Test): console.log(\u0026#34;name\u0026#34; in person); // true 1.5.2. Vòng lặp \u0026ldquo;for\u0026hellip;in\u0026rdquo; (Enumeration): for (let key in person) { console.log(key); // name, age } 1.5.3. Phương thức Object.keys: console.log(Object.keys(person)); // [\u0026#34;name\u0026#34;, \u0026#34;age\u0026#34;] 1.6. Tham chiếu và sao chép 1.6.1. Tham chiếu (References): Đối tượng lưu trữ tham chiếu, không phải giá trị.\n1.6.4. Sao chép đối tượng (Cloning and Merging): let clone = { ...person }; 1.7. Phương thức (Methods) 1.7.2. Từ khóa this: let user = { name: \u0026#34;John\u0026#34;, greet() { console.log(`Hello, ${this.name}`); }, }; user.greet(); // Hello, John 1.9. Các cách khác để tạo đối tượng 1.9.3. Constructor và new: function Person(name, age) { this.name = name; this.age = age; } let john = new Person(\u0026#34;John\u0026#34;, 30); 1.10. Prototype 1.10.1. Prototype và kế thừa: Prototype giúp chia sẻ thuộc tính và phương thức.\nlet obj = { a: 1 }; console.log(obj.__proto__); ","date":"December 25, 2024","hero":"/images/default-hero.jpg","permalink":"https://trtrantnt.github.io/posts/object/","summary":"\u003cp\u003eTìm Hiểu Về Đối Tượng Trong JavaScript\u003c/p\u003e\n\u003cp\u003eĐối tượng là một trong những khái niệm quan trọng nhất trong JavaScript, giúp bạn tổ chức dữ liệu và logic một cách hiệu quả. Trong bài viết này, chúng ta sẽ khám phá các khía cạnh chính của đối tượng, từ cách tạo đến cách sử dụng.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"11-đối-tượng-là-gì\"\u003e1.1. Đối tượng là gì?\u003c/h2\u003e\n\u003cp\u003eĐối tượng (Object) là một cấu trúc dữ liệu phức tạp, giúp lưu trữ nhiều giá trị liên quan. Nó có thể bao gồm các thuộc tính (properties) và phương thức (methods).\u003c/p\u003e","tags":["Basic"],"title":"Object trong Javascript"},{"categories":null,"contents":"Go Notes ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://trtrantnt.github.io/notes/go/_index.bn/","summary":"\u003ch1 id=\"go-notes\"\u003eGo Notes\u003c/h1\u003e","tags":null,"title":"Go এর নোট সমূহ"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://trtrantnt.github.io/notes/_index.bn/","summary":"","tags":null,"title":"নোট সমূহ"},{"categories":null,"contents":"Bash Notes ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://trtrantnt.github.io/notes/bash/_index.bn/","summary":"\u003ch1 id=\"bash-notes\"\u003eBash Notes\u003c/h1\u003e","tags":null,"title":"ব্যাশের নোট সমূহ"}]